name: Auto Label Issues and PRs

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  label-issues:
    name: Label Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Label based on issue content
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            const labels = [];
            
            // Tool request labels
            if (title.includes('add') || title.includes('request') || body.includes('new tool')) {
              labels.push('enhancement', 'tool-request');
            }
            
            // Bug labels
            if (title.includes('bug') || title.includes('error') || title.includes('broken') || title.includes('fail')) {
              labels.push('bug');
            }
            
            // Documentation labels
            if (title.includes('doc') || title.includes('guide') || title.includes('readme') || body.includes('documentation')) {
              labels.push('documentation');
            }
            
            // Script-specific labels
            const scripts = [
              'system', 'terminal', 'version', 'language', 'frontend', 
              'dev-app', 'mobile', 'productivity', 'database', 'devops', 'font'
            ];
            
            scripts.forEach(script => {
              if (title.includes(script) || body.includes(script)) {
                labels.push(`script:${script}`);
              }
            });
            
            // Platform labels
            if (title.includes('mac') || title.includes('macos')) {
              labels.push('macos');
            }
            
            // Difficulty labels based on content
            if (title.includes('simple') || title.includes('easy') || body.includes('beginner')) {
              labels.push('good first issue');
            }
            
            // Priority labels
            if (title.includes('urgent') || title.includes('critical') || body.includes('breaking')) {
              labels.push('priority:high');
            }
            
            // Apply labels if any were determined
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
              
              console.log(`Applied labels: ${labels.join(', ')}`);
            }

  label-prs:
    name: Label Pull Requests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Label based on PR changes
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            const labels = [];
            
            // Get list of changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const changedFiles = files.map(file => file.filename);
            console.log('Changed files:', changedFiles);
            
            // Label based on changed files
            if (changedFiles.some(file => file.startsWith('scripts/'))) {
              labels.push('scripts');
              
              // Specific script labels
              const scriptMap = {
                '01-system.sh': 'script:system',
                '02-terminal.sh': 'script:terminal',
                '03-version-managers.sh': 'script:version-managers',
                '04-languages.sh': 'script:languages',
                '05-frontend.sh': 'script:frontend',
                '06-dev-apps.sh': 'script:dev-apps',
                '07-mobile.sh': 'script:mobile',
                '08-productivity.sh': 'script:productivity',
                '09-database.sh': 'script:database',
                '10-devops.sh': 'script:devops',
                '11-fonts.sh': 'script:fonts'
              };
              
              Object.entries(scriptMap).forEach(([file, label]) => {
                if (changedFiles.some(f => f.includes(file))) {
                  labels.push(label);
                }
              });
            }
            
            if (changedFiles.some(file => file.startsWith('docs/') || file.endsWith('.md'))) {
              labels.push('documentation');
            }
            
            if (changedFiles.some(file => file.startsWith('.github/'))) {
              labels.push('ci/cd', 'github-actions');
            }
            
            if (changedFiles.some(file => file === 'setup-modular.sh')) {
              labels.push('core', 'setup-script');
            }
            
            // Label based on PR title
            if (title.includes('add') || title.includes('new')) {
              labels.push('enhancement');
            }
            
            if (title.includes('fix') || title.includes('bug')) {
              labels.push('bug');
            }
            
            if (title.includes('update') || title.includes('upgrade')) {
              labels.push('maintenance');
            }
            
            // Size labels based on changes
            const totalChanges = files.reduce((sum, file) => sum + file.additions + file.deletions, 0);
            if (totalChanges > 500) {
              labels.push('size:large');
            } else if (totalChanges > 100) {
              labels.push('size:medium');
            } else {
              labels.push('size:small');
            }
            
            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
              
              console.log(`Applied labels: ${labels.join(', ')}`);
            }

  welcome-new-contributors:
    name: Welcome New Contributors
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Check if first-time contributor
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            
            // Check if this is the author's first PR to this repo
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: author,
              state: 'all'
            });
            
            if (prs.length === 1) { // This is their first PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `## üéâ Welcome to Mac Developer Setup!
                
                Thank you for your first contribution, @${author}! We're excited to have you as part of our community.
                
                ### What happens next?
                
                1. **Automated tests** will run to validate your changes
                2. **Maintainers will review** your pull request
                3. We may suggest some changes or ask questions
                4. Once approved, your contribution will be merged! üöÄ
                
                ### Need help?
                
                - Check our [Contributing Guide](CONTRIBUTING.md)
                - Review the [Script Guide](SCRIPT_GUIDE.md) for development patterns
                - Ask questions in the comments below
                
                ### Testing your changes
                
                Before submitting, please test your changes by:
                \`\`\`bash
                # Test script syntax
                bash -n scripts/your-script.sh
                
                # Run the script (if safe)
                ./scripts/your-script.sh
                \`\`\`
                
                Thanks again for contributing! üôè`
              });
              
              // Add first-time contributor label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['first-time-contributor']
              });
            }